;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; test the big data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load #P"cl-pnn.lisp")
(in-package :cl-pnn)

(defparameter *data* (cl-csv:read-csv #P"/media/josephus/My Book/sc_atlas/data/atlas_data/atlas/e7_50_molecules_genes_transposed_r1000.tab" :separator #\Tab))
(defparameter *data* cl-user::*data*)
(makunbound cl-user::*data*)
(length *data*)
    
(defparameter *t* (get-row *data* 10))

(defparameter *anno* (cl-csv:read-csv #P"/media/josephus/My Book/sc_atlas/data/atlas_data/atlas/anno_e7_50.tab" :separator #\Tab))

(defparameter *labels* (get-column-by-header-name *anno* "celltype"))

(defparameter *labels-replaced* (replace-na *labels*))

(defparameter *result* (split-by-group-indexes *labels-replaced*))


;; split data in a stratified manner

(defparameter *split-result* (stratified-train-test-index-split *labels-replaced* :test-size 0.1))
(defparameter *train-indexes* (elt *split-result* 0))
(defparameter *test-indexes* (elt *split-result* 1))
(defparameter *categories* (elt *split-result* 2))
(defparameter *split* (elt *split-result* 3))
(length *split-result*)

;; extract train test data

(defparameter *train-data* (index-extract (cdr *data*) *train-indexes*))
(defparameter *test-data*  (index-extract (cdr *data*) *test-indexes*))
(defparameter *train-labels* (index-extract *labels-replaced* *train-indexes*))
(defparameter *test-labels* (index-extract *labels-replaced* *train-indexes*))

;; extract row names
;; convert to numbers
(defparameter *train-row-names* (mapcar #'first *train-data*))
(defparameter *test-row-names*  (mapcar #'first *test-data*))

(defparameter *train-matrix* (numbers-extract *train-data*))
(defparameter *test-matrix*  (numbers-extract *test-data*))

(difference-square-sum (elt *train-matrix* 0) (elt *test-matrix* 0))
(gaussian-probability-density-function (elt *train-matrix* 0) (elt *test-matrix* 0) 1)
(defparameter *t1* (gaussian-probability-density-function-matrix (elt *test-matrix* 0) *train-matrix* 1))


;; split and limit data in stratified manner
(defparameter *split-limited-result* (stratified-train-test-index-split-limited *labels-replaced* :test-size 0.3 :max-n 50))
(defparameter *train-lim-indexes* (elt *split-limited-result* 0))
(defparameter *test-lim-indexes* (elt *split-limited-result* 1))
(defparameter *categories-lim* (elt *split-limited-result* 2))
(defparameter *split-lim* (elt *split-limited-result* 3))

(defparameter *train-lim-data* (index-extract (cdr *data*) *train-lim-indexes*))
(defparameter *test-lim-data*  (index-extract (cdr *data*) *test-lim-indexes*))
(defparameter *train-lim-labels* (index-extract *labels-replaced* *train-lim-indexes*))
(defparameter *test-lim-labels* (index-extract *labels-replaced* *train-lim-indexes*))

;; extract row names
;; convert to numbers
(defparameter *train-lim-row-names* (mapcar #'first *train-lim-data*))
(defparameter *test-lim-row-names*  (mapcar #'first *test-lim-data*))

(defparameter *train-lim-matrix* (numbers-extract *train-lim-data*))
(defparameter *test-lim-matrix*  (numbers-extract *test-lim-data*))

(difference-square-sum (elt *train-lim-matrix* 0) (elt *test-lim-matrix* 0))
(gaussian-probability-density-function (elt *train-lim-matrix* 0) (elt *test-lim-matrix* 0) 1)
(defparameter *t4* (gaussian-density (elt *test-lim-matrix* 0) (head *train-lim-matrix* 9) 1)
(defparameter *t1* (gaussian-probability-density-function-matrix (elt *test-lim-matrix* 0) (head *train-lim-matrix* 9) 1))
